---
title: "world-cafe study (informing basal attributes)"
author: "Julius Fenn"
format:
  html:
    toc: true
    toc-depth: 3
    html-math-method: katex
---

```{r}
#| echo: false
#| warning: false

# sets the directory of location of this script as the current directory
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))

########################################
# load packages
########################################
require(pacman)
p_load('tidyverse', 'jsonlite', 'magrittr', 'xlsx',
       'stargazer', 'psych', 'jtools', 'DT', 'ggstatsplot', 
       'report')

########################################
# load data
########################################
##### JATOS file
setwd("data")
# dir()
suppressMessages(read_file('jatos_results_data_20231208084224.txt') %>%
  # ... split it into lines ...
  str_split('\n') %>% first() %>%
  # ... filter empty rows ...
  discard(function(x) x == '') %>%
  # ... parse JSON into a data.frame
  map_dfr(fromJSON, flatten=TRUE)) -> dat
setwd("..")

########################################
# load functions
########################################
setwd("functions")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}
rm(i)


ggplot_theme <- theme(axis.title.x = element_text(size=14),
                      axis.title.y = element_text(size=14),
                      axis.text.x = element_text(size=12,hjust=0.5,vjust=0.5,face="plain", colour = "black"),
                      axis.text.y = element_text(size=12,face="plain", colour = "black"),
                      panel.border = element_blank(),
                      axis.line = element_line(colour = "black"),
                      panel.grid.major = element_blank(),
                      panel.grid.minor = element_blank(),
                      panel.background = element_blank())
```

# Notes

Remark: The study formally was divided in 2 parts, also informing about the risk and benefits of soft robots. This part of the study is not discussed here.

# prepare data

## set up data.frame

```{r}
########################################
# create counter variable for data set
########################################
dat$ID <- NA

tmp_IDcounter <- 0
for(i in 1:nrow(dat)){
  if(!is.na(dat$sender[i]) && dat$sender[i] == "Greetings"){
    # tmp <- dat$prolific_pid[i]
    tmp_IDcounter = tmp_IDcounter + 1
  }
  dat$ID[i] <- tmp_IDcounter
}


########################################
# keep only complete data sets
########################################
sum(table(dat$ID) != max(table(dat$ID)))
sum(table(dat$ID) == max(table(dat$ID)))
dat <- dat[dat$ID %in% names(table(dat$ID))[table(dat$ID) == max(table(dat$ID))],]

########################################
# json (from JATOS) to 2D data.frame
########################################
tmp_notNumeric <- str_subset(string = colnames(dat), pattern = "^meta")
tmp_notNumeric <- str_subset(string = tmp_notNumeric, pattern = "labjs|location", negate = TRUE)

# tmp_numeric <- str_subset(string = colnames(dat), pattern = "^affImgAffect|^CRKQ|^CCSQ|^CMQ|^GCB")


vec_ques <- c("dummy_informedconsent",
              tmp_notNumeric,
              
              "applicationsSR", "applicationsSRdefinition",
              
              "benefitsSR", "benefitsSRdefinition",
              "risksSR", "risksSRdefinition",
              
              "socialBenefitsSR", "socialBenefitsSRdefinition", 
              "socialRisksSR", "socialRisksSRdefinition",
              
              "sustainableSR", "sustainableSRdefinition",
              
              "feedback_critic")

vec_notNumeric = c("dummy_informedconsent",
              tmp_notNumeric,
              
              "applicationsSR", "applicationsSRdefinition",
              
              "benefitsSR", "benefitsSRdefinition",
              "risksSR", "risksSRdefinition",
              
              "socialBenefitsSR", "socialBenefitsSRdefinition", 
              "socialRisksSR", "socialRisksSRdefinition",
              
              "sustainableSR", "sustainableSRdefinition",
              
              "feedback_critic")

questionnaire <- questionnairetype(dataset = dat, 
                                        listvars = vec_ques, 
                                        notNumeric = vec_notNumeric)
```


## get reaction times for single components

*not needed*

## clean data (if needed)

*not needed*

# describe data 

## sample description

```{r}
## number of participants
nrow(questionnaire)
```

# open questions

## general feedback, critic

```{r}
tmp_dat <- questionnaire[questionnaire$feedback_critic != "" & !is.na(questionnaire$feedback_critic), c("ID","feedback_critic")]
DT::datatable(tmp_dat, options = list(pageLength = 5)) 
```



# basal attributes

## relevancy and valence ratings

Remark: two times I surveyed "autonomous" (German: selbstst채ndig, autonom)

```{r}
#| warning: false
########################################
# get data set with all ratings
########################################
dat_ratings <- na.omit(dat[, c("ID", "Attribut", "English_translation", "ratingLivmats", "ratingValence")])
dat_ratings$ratingLivmats <- as.numeric(dat_ratings$ratingLivmats)
dat_ratings$ratingValence <- as.numeric(dat_ratings$ratingValence)

if(nrow(dat_ratings) / 32 == nrow(questionnaire)){
  print("Everything worked fine")
}

########################################
# summary of all ratings
########################################
summary_ratings <- dat_ratings %>%
  group_by(English_translation) %>%
  summarize(N = n(), 
            mean_ratingLivmats = mean(ratingLivmats), SD_ratingLivmats = sd(ratingLivmats),
            mean_ratingValence = mean(ratingValence), SD_ratingValence = sd(ratingValence)) %>%
  mutate(across(3:6, round, 2))

## neutral = 4
DT::datatable(summary_ratings, options = list(pageLength = 5)) 

## save
xlsx::write.xlsx2(x = summary_ratings, file = "outputs/summary_ratings.xlsx")

########################################
# get words of basal attributes => 6
########################################
summary_ratings$English_translation[summary_ratings$mean_ratingLivmats >= 6]
```
Plot relevancy ratings: 

```{r}
#| warning: false
# Calculate mean and standard deviation
mu <- mean(dat_ratings$ratingLivmats, na.rm = TRUE); mu
sigma <- sd(dat_ratings$ratingLivmats, na.rm = TRUE); sigma

# Create the histogram with normal distribution overlay
ggplot(dat_ratings, aes(x = ratingLivmats)) +
  geom_histogram(aes(y = ..density..), binwidth = 1, fill = "dodgerblue3", color = "white") +
  stat_function(fun = dnorm, args = list(mean = mu, sd = sigma), color = "red") +
  labs(x = "Mean Relevancy Ratings", y = "Density") +
  theme_apa() +
  theme(plot.title = element_text(hjust = 0.5)) + geom_vline(xintercept = mean(dat_ratings$ratingLivmats, na.rm = TRUE), col = "red")
```


Plot valence ratings: 

```{r}
#| warning: false
# Calculate mean and standard deviation
mu <- mean(dat_ratings$ratingValence, na.rm = TRUE)
sigma <- sd(dat_ratings$ratingValence, na.rm = TRUE)

# Create the histogram with normal distribution overlay
ggplot(dat_ratings, aes(x = ratingValence)) +
  geom_histogram(aes(y = ..density..), binwidth = 1, fill = "dodgerblue3", color = "white") +
  stat_function(fun = dnorm, args = list(mean = mu, sd = sigma), color = "red") +
  labs(x = "Mean Valence Ratings", y = "Density") +
  theme_apa() +
  theme(plot.title = element_text(hjust = 0.5)) + geom_vline(xintercept = mean(dat_ratings$ratingValence, na.rm = TRUE), col = "red")
```

## relation relevancy and valence ratings

**both are medium-strongly related**

```{r}
ggplot(dat_ratings, aes(x = ratingLivmats, y = ratingValence)) +
  geom_point(position = position_jitter(width = 0.2, height = 0.2)) + 
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "Relevancy Ratings", y = "Valence Ratings") + ggplot_theme

cor(dat_ratings$ratingLivmats, dat_ratings$ratingValence)
```


## relevancy and valence ratings

Remark: two times I surveyed "autonomous" (German: selbstst채ndig, autonom)


```{r}
dat_interCorrelation <- data.frame(autonomous1_Rel = NA, autonomous2_Rel = NA,
                                   autonomous1_Val = NA, autonomous2_Val = NA)
h = 1
for(i in unique(dat_ratings$ID)){
  tmp <- dat_ratings[dat_ratings$ID == i, ]
  dat_interCorrelation[h, ] <- c(tmp$ratingLivmats[tmp$Attribut == "selbstst채ndig"], 
                                 tmp$ratingLivmats[tmp$Attribut == "autonom"],
                                 tmp$ratingValence[tmp$Attribut == "selbstst채ndig"], 
                                 tmp$ratingValence[tmp$Attribut == "autonom"])
  h = h + 1
}


# for Relevancy Rating
ggplot(dat_interCorrelation, aes(x = autonomous1_Rel, y = autonomous2_Rel)) +
  geom_point(position = position_jitter(width = 0.2, height = 0.2)) + 
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "autonomous relevancy 1", y = "autonomous relevancy 2") + ggplot_theme

cor(dat_interCorrelation$autonomous1_Rel, dat_interCorrelation$autonomous2_Rel)
report::report(cor.test(dat_interCorrelation$autonomous1_Rel, dat_interCorrelation$autonomous2_Rel))


# for Valence Rating
ggplot(dat_interCorrelation, aes(x = autonomous1_Val, y = autonomous2_Val)) +
  geom_point(position = position_jitter(width = 0.2, height = 0.2)) + 
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "autonomous valence 1", y = "autonomous valence 2") + ggplot_theme

cor(dat_interCorrelation$autonomous1_Val, dat_interCorrelation$autonomous2_Val)
report::report(cor.test(dat_interCorrelation$autonomous1_Val, dat_interCorrelation$autonomous2_Val))
```

## missing basal attributes for single research areas

for **Research Area A (Energy Autonomy):**
```{r}
table(unlist(dat$toolsStatistics))
```

for **Research Area B (Adaptivity):**
```{r}
table(unlist(dat$toolsSoftwares))
```

for **Research Area C (Longevity):**
```{r}
table(unlist(dat$toolsTopics))
```

for **Research Area D (Societal challenges and Sustainability):**
```{r}
table(unlist(dat$toolsData))
```


